# transformation test result artefact
# ARTEFACT: TRANSFORM_DimCustomer_Residential
# CREATED DATE: 2014-08-14T113240

2014-08-14 11:32:41	1	PASSED	source.length.should.equal(destination.length)	{"obj":8,"params":{"operator":"to be","expected":8,"showDiff":true},"negate":false}
2014-08-14 11:32:41	2	PASSED	parseInt(source[0].party_code).should.equal(destination[0].CustomerCode)	{"obj":1705150,"params":{"operator":"to be","expected":1705150,"showDiff":true},"negate":false}
2014-08-14 11:32:42	3	PASSED	parseInt(source[0].seq_party_id).should.equal(destination[0].CustomerKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-08-14 11:32:42	4	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"Ms","params":{"operator":"to be","expected":"Ms","showDiff":true},"negate":false}
2014-08-14 11:32:43	5	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-14 11:32:44	6	PASSED	source[0].first_name.should.equal(destination[0].Firstname)	{"obj":"Firstname1","params":{"operator":"to be","expected":"Firstname1","showDiff":true},"negate":false}
2014-08-14 11:32:44	7	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-14 11:32:45	8	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"E","params":{"operator":"to be","expected":"E","showDiff":true},"negate":false}
2014-08-14 11:32:46	9	PASSED	source[0].last_name.should.equal(destination[0].LastName)	{"obj":"Lastname1","params":{"operator":"to be","expected":"Lastname1","showDiff":true},"negate":false}
2014-08-14 11:32:47	10	PASSED	source[0].party_name.should.equal(destination[0].PartyName)	{"obj":"Firstname1 Lastname1","params":{"operator":"to be","expected":"Firstname1 Lastname1","showDiff":true},"negate":false}
2014-08-14 11:32:47	11	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-08-14 11:32:49	12	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-14 11:32:50	13	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-08-14 11:32:51	14	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-14 11:32:51	15	PASSED	source[0].street_addr_1.should.equal(destination[0].ResidentialAddressLine1)	{"obj":"20 fake AVE","params":{"operator":"to be","expected":"20 fake AVE","showDiff":true},"negate":false}
2014-08-14 11:32:52	16	PASSED	source[0].street_addr_2.should.equal(destination[0].ResidentialSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-14 11:32:52	17	PASSED	source[0].street_addr_3.should.equal(destination[0].ResidentialState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-14 11:32:53	18	PASSED	(source[0].std_code+source[0].phone_no).should.equal(destination[0].PrimaryPhone)	{"obj":"812345678","params":{"operator":"to be","expected":"812345678","showDiff":true},"negate":false}
2014-08-14 11:32:54	19	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-14 11:32:54	20	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-14 11:32:55	21	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Unknown","params":{"operator":"to be","expected":"Unknown","showDiff":true},"negate":false}
2014-08-14 11:32:55	22	PASSED	(source[0].secondary_std_code+source[0].secondary_phone_no).should.equal(destination[0].SecondaryPhone)	{"obj":"412123456","params":{"operator":"to be","expected":"412123456","showDiff":true},"negate":false}
2014-08-14 11:32:56	23	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-14 11:32:56	24	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-14 11:32:57	25	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Unknown","params":{"operator":"to be","expected":"Unknown","showDiff":true},"negate":false}
2014-08-14 11:32:58	26	PASSED	'412123456'.should.equal(destination[0].MobilePhone.trim())	{"obj":"412123456","params":{"operator":"to be","expected":"412123456","showDiff":true},"negate":false}
2014-08-14 11:32:59	27	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"abcd@yahoo.com","params":{"operator":"to be","expected":"abcd@yahoo.com","showDiff":true},"negate":false}
2014-08-14 11:32:59	28	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-14 11:33:01	29	PASSED	source[0].date_of_birth.toString().should.equal(destination[0].DateOfBirth.toString())	{"obj":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","params":{"operator":"to be","expected":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","showDiff":true},"negate":false}
