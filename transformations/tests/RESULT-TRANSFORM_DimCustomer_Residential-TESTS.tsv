# transformation test result artefact
# ARTEFACT: TRANSFORM_DimCustomer_Residential
# CREATED DATE: 2014-08-29T113257

2014-08-29 11:33:00	2	PASSED	source.length.should.equal(destination.length)	{"obj":8,"params":{"operator":"to be","expected":8,"showDiff":true},"negate":false}
2014-08-29 11:33:01	3	PASSED	parseInt(source[0].seq_party_id).should.equal(destination[0].CustomerKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-08-29 11:33:03	4	PASSED	parseInt(source[0].party_code).should.equal(destination[0].CustomerCode)	{"obj":1705150,"params":{"operator":"to be","expected":1705150,"showDiff":true},"negate":false}
2014-08-29 11:33:04	5	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"Ms","params":{"operator":"to be","expected":"Ms","showDiff":true},"negate":false}
2014-08-29 11:33:05	6	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-29 11:33:06	7	PASSED	source[0].first_name.should.equal(destination[0].Firstname)	{"obj":"Firstname1","params":{"operator":"to be","expected":"Firstname1","showDiff":true},"negate":false}
2014-08-29 11:33:07	8	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-29 11:33:08	9	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"E","params":{"operator":"to be","expected":"E","showDiff":true},"negate":false}
2014-08-29 11:33:09	10	PASSED	source[0].last_name.should.equal(destination[0].LastName)	{"obj":"Lastname1","params":{"operator":"to be","expected":"Lastname1","showDiff":true},"negate":false}
2014-08-29 11:33:10	11	PASSED	source[0].party_name.should.equal(destination[0].PartyName)	{"obj":"Firstname1 Lastname1","params":{"operator":"to be","expected":"Firstname1 Lastname1","showDiff":true},"negate":false}
2014-08-29 11:33:10	12	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-08-29 11:33:11	13	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-29 11:33:12	14	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-08-29 11:33:12	15	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-29 11:33:14	16	PASSED	source[0].street_addr_1.should.equal(destination[0].ResidentialAddressLine1)	{"obj":"20 fake AVE","params":{"operator":"to be","expected":"20 fake AVE","showDiff":true},"negate":false}
2014-08-29 11:33:15	17	PASSED	source[0].street_addr_2.should.equal(destination[0].ResidentialSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-29 11:33:16	18	PASSED	source[0].street_addr_3.should.equal(destination[0].ResidentialState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-29 11:33:17	19	PASSED	(source[0].std_code+source[0].phone_no).should.equal(destination[0].PrimaryPhone)	{"obj":"0812345678","params":{"operator":"to be","expected":"0812345678","showDiff":true},"negate":false}
2014-08-29 11:33:18	20	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : '{Unknow}').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-29 11:33:19	21	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : '{Unknow}').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-29 11:33:20	22	PASSED	should.not.exist(destination[0].PrimaryPhoneType)	undefined
2014-08-29 11:33:21	23	PASSED	(source[0].secondary_std_code+source[0].secondary_phone_no).should.equal(destination[0].SecondaryPhone)	{"obj":"0412123456","params":{"operator":"to be","expected":"0412123456","showDiff":true},"negate":false}
2014-08-29 11:33:22	24	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : '{Unknow}').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-29 11:33:23	25	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : '{Unknow}').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-29 11:33:23	26	PASSED	should.not.exist(destination[0].SecondaryPhoneType)	undefined
2014-08-29 11:33:24	27	PASSED	'0412123456'.should.equal(destination[0].MobilePhone.trim())	{"obj":"0412123456","params":{"operator":"to be","expected":"0412123456","showDiff":true},"negate":false}
2014-08-29 11:33:28	28	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"abcd@yahoo.com","params":{"operator":"to be","expected":"abcd@yahoo.com","showDiff":true},"negate":false}
2014-08-29 11:33:29	29	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-29 11:33:30	30	PASSED	source[0].date_of_birth.toString().should.equal(destination[0].DateOfBirth.toString())	{"obj":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","params":{"operator":"to be","expected":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","showDiff":true},"negate":false}
2014-08-29 11:33:31	31	PASSED	((source[0].seq_element_type_id == '9') ? 'Residential' : (source[0].seq_element_type_id == '8') ? 'Business' : 'NULL').should.equal(destination[0].CustomerType.trim())	{"obj":"Residential","params":{"operator":"to be","expected":"Residential","showDiff":true},"negate":false}
2014-08-29 11:33:32	32	PASSED	'Active'.should.equal(destination[0].CustomerStatus.trim())	{"obj":"Active","params":{"operator":"to be","expected":"Active","showDiff":true},"negate":false}
2014-08-29 11:33:33	33	PASSED	'Inactive'.should.equal(destination[0].CustomerStatus.trim())	{"obj":"Inactive","params":{"operator":"to be","expected":"Inactive","showDiff":true},"negate":false}
2014-08-29 11:33:34	34	PASSED	'Yes'.should.equal(destination[0].OmbudsmanComplaints.trim())	{"obj":"Yes","params":{"operator":"to be","expected":"Yes","showDiff":true},"negate":false}
2014-08-29 11:33:34	35	PASSED	'No'.should.equal(destination[0].OmbudsmanComplaints.trim())	{"obj":"No","params":{"operator":"to be","expected":"No","showDiff":true},"negate":false}
2014-08-29 11:33:35	36	PASSED	source[0].insert_datetime.getFullYear().should.equal(destination[0].CreationDate.getFullYear())	{"obj":2011,"params":{"operator":"to be","expected":2011,"showDiff":true},"negate":false}
2014-08-29 11:33:36	37	PASSED	source[0].insert_datetime.getMonth().should.equal(destination[0].CreationDate.getMonth())	{"obj":7,"params":{"operator":"to be","expected":7,"showDiff":true},"negate":false}
2014-08-29 11:33:37	38	PASSED	'Sat Aug 20 2011 10:00:00 GMT+1000 (AUS Eastern Standard Time)'.should.equal(destination[0].JoinDate.toString())	{"obj":"Sat Aug 20 2011 10:00:00 GMT+1000 (AUS Eastern Standard Time)","params":{"operator":"to be","expected":"Sat Aug 20 2011 10:00:00 GMT+1000 (AUS Eastern Standard Time)","showDiff":true},"negate":false}
2014-08-29 11:33:38	39	PASSED	'Mon Jan 31 2005 11:00:00 GMT+1100 (AUS Eastern Daylight Time)'.should.equal(destination[0].JoinDate.toString())	{"obj":"Mon Jan 31 2005 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","params":{"operator":"to be","expected":"Mon Jan 31 2005 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","showDiff":true},"negate":false}
2014-08-29 11:33:39	40	PASSED	((source[0].promo_allowed == 'E') ? 'Preferred contact by email' : (source[0].promo_allowed == 'P') ? 'Preferred contact by phone' : (source[0].promo_allowed == 'Y') ? 'Preferred contact by mail' : 'NULL').should.equal(destination[0].PrivacyPreferredStatus)	{"obj":"Preferred contact by phone","params":{"operator":"to be","expected":"Preferred contact by phone","showDiff":true},"negate":false}
2014-08-29 11:33:39	41	PASSED	((source[0].promo_allowed == 'E') ? 'Preferred contact by email' : (source[0].promo_allowed == 'P') ? 'Preferred contact by phone' : (source[0].promo_allowed == 'Y') ? 'Preferred contact by mail' : 'NULL').should.equal(destination[0].PrivacyPreferredStatus)	{"obj":"Preferred contact by mail","params":{"operator":"to be","expected":"Preferred contact by mail","showDiff":true},"negate":false}
2014-08-29 11:33:40	42	PASSED	((source[0].promo_allowed == 'E') ? 'Preferred contact by email' : (source[0].promo_allowed == 'P') ? 'Preferred contact by phone' : (source[0].promo_allowed == 'Y') ? 'Preferred contact by mail' : 'NULL').should.equal(destination[0].PrivacyPreferredStatus)	{"obj":"Preferred contact by email","params":{"operator":"to be","expected":"Preferred contact by email","showDiff":true},"negate":false}
