# transformation test result artefact
# ARTEFACT: TRANSFORM_DimAccount
# CREATED DATE: 2014-08-26T154912

2014-08-26 15:49:14	2	PASSED	source.length.should.equal(destination.length)	{"obj":9,"params":{"operator":"to be","expected":9,"showDiff":true},"negate":false}
2014-08-26 15:49:14	3	PASSED	parseInt(source[0].party_code).should.equal(destination[0].AccountCode)	{"obj":1705150,"params":{"operator":"to be","expected":1705150,"showDiff":true},"negate":false}
2014-08-26 15:49:15	4	PASSED	parseInt(source[0].seq_party_id).should.equal(destination[0].AccountKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-08-26 15:49:16	5	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-08-26 15:49:16	6	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-26 15:49:17	7	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-08-26 15:49:17	8	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-26 15:49:18	9	PASSED	source[0].insert_datetime.getFullYear().should.equal(destination[0].CreationDate.getFullYear())	{"obj":2011,"params":{"operator":"to be","expected":2011,"showDiff":true},"negate":false}
2014-08-26 15:49:19	10	PASSED	source[0].insert_datetime.getMonth().should.equal(destination[0].CreationDate.getMonth())	{"obj":7,"params":{"operator":"to be","expected":7,"showDiff":true},"negate":false}
2014-08-26 15:49:19	11	PASSED	((source[0].cz_registered == 'Y') ? 'Registered' : 'Not Registered').should.equal(destination[0].MyAccountStatus)	{"obj":"Not Registered","params":{"operator":"to be","expected":"Not Registered","showDiff":true},"negate":false}
2014-08-26 15:49:20	12	PASSED	((source[0].cz_registered == 'Y') ? 'Registered' : 'Not Registered').should.equal(destination[0].MyAccountStatus)	{"obj":"Registered","params":{"operator":"to be","expected":"Registered","showDiff":true},"negate":false}
2014-08-26 15:49:20	13	PASSED	'Closed'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Closed","params":{"operator":"to be","expected":"Closed","showDiff":true},"negate":false}
2014-08-26 15:49:21	14	PASSED	'Open'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Open","params":{"operator":"to be","expected":"Open","showDiff":true},"negate":false}
2014-08-26 15:49:22	15	PASSED	'Pending'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Pending","params":{"operator":"to be","expected":"Pending","showDiff":true},"negate":false}
