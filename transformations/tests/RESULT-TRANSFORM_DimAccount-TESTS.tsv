# transformation test result artefact
# ARTEFACT: TRANSFORM_DimAccount
# CREATED DATE: 2014-09-09T132411

2014-09-09 13:24:12	2	PASSED	source.length.should.equal(destination.length)	{"obj":13,"params":{"operator":"to be","expected":13,"showDiff":true},"negate":false}
2014-09-09 13:24:13	3	PASSED	parseInt(source[0].seq_party_id).should.equal(destination[0].AccountKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-09-09 13:24:14	4	PASSED	parseInt(source[0].party_code).should.equal(destination[0].AccountCode)	{"obj":1705150,"params":{"operator":"to be","expected":1705150,"showDiff":true},"negate":false}
2014-09-09 13:24:15	5	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-09-09 13:24:15	6	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-09-09 13:24:16	7	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-09-09 13:24:17	8	PASSED	should.not.exist(destination[0].PostalState)	undefined
2014-09-09 13:24:17	9	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-09-09 13:24:18	10	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalStateAsProvided.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-09-09 13:24:19	11	PASSED	'Closed'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Closed","params":{"operator":"to be","expected":"Closed","showDiff":true},"negate":false}
2014-09-09 13:24:19	12	PASSED	'Open'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Open","params":{"operator":"to be","expected":"Open","showDiff":true},"negate":false}
2014-09-09 13:24:20	13	PASSED	'Pending'.should.equal(destination[0].AccountStatus.trim())	{"obj":"Pending","params":{"operator":"to be","expected":"Pending","showDiff":true},"negate":false}
2014-09-09 13:24:21	14	PASSED	source[0].insert_datetime.getFullYear().should.equal(destination[0].AccountCreationDate.getFullYear())	{"obj":2011,"params":{"operator":"to be","expected":2011,"showDiff":true},"negate":false}
2014-09-09 13:24:22	15	PASSED	source[0].insert_datetime.getMonth().should.equal(destination[0].AccountCreationDate.getMonth())	{"obj":7,"params":{"operator":"to be","expected":7,"showDiff":true},"negate":false}
2014-09-09 13:24:22	16	PASSED	parseInt('2011').should.equal(destination[0].AccountClosedDate.getFullYear())	{"obj":2011,"params":{"operator":"to be","expected":2011,"showDiff":true},"negate":false}
2014-09-09 13:24:23	17	PASSED	parseInt('7').should.equal(destination[0].AccountClosedDate.getMonth())	{"obj":7,"params":{"operator":"to be","expected":7,"showDiff":true},"negate":false}
2014-09-09 13:24:24	18	PASSED	source[0].seq_credit_status_desc.should.equal(destination[0].CreditControlStatus)	{"obj":"Credit Collect","params":{"operator":"to be","expected":"Credit Collect","showDiff":true},"negate":false}
2014-09-09 13:24:24	19	PASSED	source[0].seq_credit_status_desc.should.equal(destination[0].CreditControlStatus)	{"obj":"Standard Credit Control Procedures Apply","params":{"operator":"to be","expected":"Standard Credit Control Procedures Apply","showDiff":true},"negate":false}
2014-09-09 13:24:25	20	PASSED	source[0].CreditControlCategory.should.equal(destination[0].CreditControlCategory)	{"obj":"Immediate Recovery","params":{"operator":"to be","expected":"Immediate Recovery","showDiff":true},"negate":false}
2014-09-09 13:24:26	21	PASSED	source[0].inv_del_mode_desc.should.equal(destination[0].InvoiceDeliveryMethod)	{"obj":"Online EBILL","params":{"operator":"to be","expected":"Online EBILL","showDiff":true},"negate":false}
2014-09-09 13:24:27	22	PASSED	source[0].inv_del_mode_desc.should.equal(destination[0].InvoiceDeliveryMethod)	{"obj":"Email Spreadsheet","params":{"operator":"to be","expected":"Email Spreadsheet","showDiff":true},"negate":false}
2014-09-09 13:24:27	23	PASSED	source[0].inv_del_mode_desc.should.equal(destination[0].InvoiceDeliveryMethod)	{"obj":"Mail","params":{"operator":"to be","expected":"Mail","showDiff":true},"negate":false}
2014-09-09 13:24:28	24	PASSED	(source[0].seq_pay_method_id == 17 ? 'Direct Credit' : source[0].seq_pay_method_id == 14 ? 'Cheque' : source[0].seq_pay_method_id == 18 ? 'Direct Debit' : source[0].seq_pay_method_id == 22 ? 'Credit Card' : 'UNKNOWN').should.equal(destination[0].PaymentMethod)	{"obj":"Cheque","params":{"operator":"to be","expected":"Cheque","showDiff":true},"negate":false}
2014-09-09 13:24:29	25	PASSED	(source[0].seq_pay_method_id == 17 ? 'Direct Credit' : source[0].seq_pay_method_id == 14 ? 'Cheque' : source[0].seq_pay_method_id == 18 ? 'Direct Debit' : source[0].seq_pay_method_id == 22 ? 'Credit Card' : 'UNKNOWN').should.equal(destination[0].PaymentMethod)	{"obj":"Direct Debit","params":{"operator":"to be","expected":"Direct Debit","showDiff":true},"negate":false}
2014-09-09 13:24:29	26	PASSED	(source[0].seq_pay_method_id == 17 ? 'Direct Credit' : source[0].seq_pay_method_id == 14 ? 'Cheque' : source[0].seq_pay_method_id == 18 ? 'Direct Debit' : source[0].seq_pay_method_id == 22 ? 'Credit Card' : 'UNKNOWN').should.equal(destination[0].PaymentMethod)	{"obj":"Direct Credit","params":{"operator":"to be","expected":"Direct Credit","showDiff":true},"negate":false}
2014-09-09 13:24:30	27	PASSED	(source[0].seq_pay_method_id == 17 ? 'Direct Credit' : source[0].seq_pay_method_id == 14 ? 'Cheque' : source[0].seq_pay_method_id == 18 ? 'Direct Debit' : source[0].seq_pay_method_id == 22 ? 'Credit Card' : 'UNKNOWN').should.equal(destination[0].PaymentMethod)	{"obj":"Credit Card","params":{"operator":"to be","expected":"Credit Card","showDiff":true},"negate":false}
2014-09-09 13:24:31	28	PASSED	((source[0].cz_registered == 'Y') ? 'Registered' : 'Not Registered').should.equal(destination[0].MyAccountStatus)	{"obj":"Not Registered","params":{"operator":"to be","expected":"Not Registered","showDiff":true},"negate":false}
2014-09-09 13:24:31	29	PASSED	((source[0].cz_registered == 'Y') ? 'Registered' : 'Not Registered').should.equal(destination[0].MyAccountStatus)	{"obj":"Registered","params":{"operator":"to be","expected":"Registered","showDiff":true},"negate":false}
