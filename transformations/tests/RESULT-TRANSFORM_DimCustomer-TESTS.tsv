# transformation test result artefact
# ARTEFACT: TRANSFORM_DimCustomer
# CREATED DATE: 2014-08-13T152024

2014-08-13 15:20:25	2	FAILED	source[0].party_code.should.equal(destination[0].CustomerCode)	{"name":"AssertionError","actual":"1705150","expected":1705150,"operator":"to be","message":"expected '1705150' to be 1705150","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:26	3	PASSED	source[0].seq_party_id.should.equal(destination[0].CustomerKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-08-13 15:20:26	4	FAILED	source[0].title.should.equal(destination[0].Title)	{"name":"AssertionError","actual":"Ms","expected":"Ms ","operator":"to be","message":"expected 'Ms' to be 'Ms '","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:27	5	PASSED	source[0].first_name.should.equal(destination[0].Firstname)	{"obj":"Firstname1","params":{"operator":"to be","expected":"Firstname1","showDiff":true},"negate":false}
2014-08-13 15:20:28	6	FAILED	source[0].initials.should.equal(destination[0].MiddleInitial)	{"name":"AssertionError","actual":"","expected":"          ","operator":"to be","message":"expected '' to be '          '","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:28	7	PASSED	source[0].last_name.should.equal(destination[0].LastName)	{"obj":"Lastname1","params":{"operator":"to be","expected":"Lastname1","showDiff":true},"negate":false}
2014-08-13 15:20:29	8	PASSED	source[0].party_name.should.equal(destination[0].PartyName)	{"obj":"Firstname1 Lastname1","params":{"operator":"to be","expected":"Firstname1 Lastname1","showDiff":true},"negate":false}
2014-08-13 15:20:29	9	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-08-13 15:20:30	10	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-13 15:20:30	11	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-08-13 15:20:31	12	FAILED	source[0].postal_addr_3.should.equal(destination[0].PostalState)	{"name":"AssertionError","actual":"SA","expected":"SA ","operator":"to be","message":"expected 'SA' to be 'SA '","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:31	13	PASSED	source[0].street_addr_1.should.equal(destination[0].ResidentialAddressLine1)	{"obj":"20 fake AVE","params":{"operator":"to be","expected":"20 fake AVE","showDiff":true},"negate":false}
2014-08-13 15:20:32	14	PASSED	source[0].street_addr_2.should.equal(destination[0].ResidentialSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-13 15:20:33	15	FAILED	source[0].street_post_code.should.equal(destination[0].ResidentialPostcode) problem processing test - please update	TypeError: Cannot read property 'should' of null
2014-08-13 15:20:33	16	FAILED	source[0].street_addr_3.should.equal(destination[0].ResidentialState)	{"name":"AssertionError","actual":"SA","expected":"SA ","operator":"to be","message":"expected 'SA' to be 'SA '","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:34	17	FAILED	source[0].std_code.should.equal(destination[0].PrimaryPhone)	{"name":"AssertionError","actual":"8","expected":"812345678","operator":"to be","message":"expected '8' to be '812345678'","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:34	18	FAILED	source[0].primary_phone_type_id.should.equal(destination[0].PrimaryPhoneType)	{"name":"AssertionError","actual":1,"expected":"Landline","operator":"to be","message":"expected 1 to be 'Landline'","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:35	19	FAILED	source[0].secondary_std_code.should.equal(destination[0].SecondaryPhone)	{"name":"AssertionError","actual":"","expected":"Unknown","operator":"to be","message":"expected '' to be 'Unknown'","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:35	20	FAILED	source[0].secondary_phone_type_id.should.equal(destination[0].SecondaryPhoneType) problem processing test - please update	TypeError: Cannot read property 'should' of null
2014-08-13 15:20:36	21	FAILED	source[0].std_code.should.equal(destination[0].MobilePhone)	{"name":"AssertionError","actual":"8","expected":"Unknown   ","operator":"to be","message":"expected '8' to be 'Unknown   '","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:36	22	FAILED	source[0].email_address.should.equal(destination[0].Email)	{"name":"AssertionError","actual":"","expected":"Unknown","operator":"to be","message":"expected '' to be 'Unknown'","showDiff":true,"generatedMessage":true}
2014-08-13 15:20:37	23	FAILED	source[0].date_of_birth.should.equal(destination[0].DateOfBirth)	{"name":"AssertionError","actual":"1930-01-02T00:00:00.000Z","expected":"1930-01-02T00:00:00.000Z","operator":"to be","message":"expected 1930-01-02T00:00:00.000Z to be 1930-01-02T00:00:00.000Z","showDiff":true,"generatedMessage":true}
