# transformation test result artefact
# ARTEFACT: TRANSFORM_DimCustomer
# CREATED DATE: 2014-08-12T142222

2014-08-12 14:22:23	1	PASSED	source.length.should.equal(destination.length)	{"obj":9,"params":{"operator":"to be","expected":9,"showDiff":true},"negate":false}
2014-08-12 14:22:24	2	PASSED	parseInt(source[0].party_code).should.equal(destination[0].CustomerCode)	{"obj":1705150,"params":{"operator":"to be","expected":1705150,"showDiff":true},"negate":false}
2014-08-12 14:22:25	3	PASSED	parseInt(source[0].seq_party_id).should.equal(destination[0].CustomerKey)	{"obj":2102891,"params":{"operator":"to be","expected":2102891,"showDiff":true},"negate":false}
2014-08-12 14:22:25	4	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"Ms","params":{"operator":"to be","expected":"Ms","showDiff":true},"negate":false}
2014-08-12 14:22:26	5	PASSED	source[0].title.should.equal(destination[0].Title.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-12 14:22:27	6	PASSED	source[0].first_name.should.equal(destination[0].Firstname)	{"obj":"Firstname1","params":{"operator":"to be","expected":"Firstname1","showDiff":true},"negate":false}
2014-08-12 14:22:27	7	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-12 14:22:28	8	PASSED	source[0].initials.should.equal(destination[0].MiddleInitial.trim())	{"obj":"E","params":{"operator":"to be","expected":"E","showDiff":true},"negate":false}
2014-08-12 14:22:28	9	PASSED	source[0].last_name.should.equal(destination[0].LastName)	{"obj":"Lastname1","params":{"operator":"to be","expected":"Lastname1","showDiff":true},"negate":false}
2014-08-12 14:22:29	10	PASSED	source[0].party_name.should.equal(destination[0].PartyName)	{"obj":"Firstname1 Lastname1","params":{"operator":"to be","expected":"Firstname1 Lastname1","showDiff":true},"negate":false}
2014-08-12 14:22:30	11	PASSED	source[0].party_name.should.equal(destination[0].PartyName)	{"obj":"Business1","params":{"operator":"to be","expected":"Business1","showDiff":true},"negate":false}
2014-08-12 14:22:30	12	PASSED	source[0].postal_addr_1.should.equal(destination[0].PostalAddressLine1)	{"obj":"20 Fake Avenue","params":{"operator":"to be","expected":"20 Fake Avenue","showDiff":true},"negate":false}
2014-08-12 14:22:31	13	PASSED	source[0].postal_addr_2.should.equal(destination[0].PostalSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-12 14:22:31	14	PASSED	source[0].postal_post_code.should.equal(destination[0].PostalPostcode)	{"obj":"5033","params":{"operator":"to be","expected":"5033","showDiff":true},"negate":false}
2014-08-12 14:22:32	15	PASSED	source[0].postal_addr_3.should.equal(destination[0].PostalState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-12 14:22:33	16	PASSED	source[0].street_addr_1.should.equal(destination[0].ResidentialAddressLine1)	{"obj":"20 fake AVE","params":{"operator":"to be","expected":"20 fake AVE","showDiff":true},"negate":false}
2014-08-12 14:22:33	17	PASSED	source[0].street_addr_2.should.equal(destination[0].ResidentialSuburb)	{"obj":"MARLESTON","params":{"operator":"to be","expected":"MARLESTON","showDiff":true},"negate":false}
2014-08-12 14:22:34	18	FAILED	source[0].street_post_code.should.equal(destination[0].ResidentialPostcode.trim()) problem processing test - please update	TypeError: Cannot read property 'should' of null
2014-08-12 14:22:35	19	PASSED	source[0].street_addr_3.should.equal(destination[0].ResidentialState.trim())	{"obj":"SA","params":{"operator":"to be","expected":"SA","showDiff":true},"negate":false}
2014-08-12 14:22:35	20	FAILED	'Todo'.should.equal(destination[0].PrimaryPhone)	{"name":"AssertionError","actual":"Todo","expected":"812345678","operator":"to be","message":"expected 'Todo' to be '812345678'","showDiff":true,"generatedMessage":true}
2014-08-12 14:22:36	21	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-12 14:22:36	22	PASSED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-12 14:22:37	23	FAILED	((source[0].primary_phone_type_id == '1') ? 'Landline' : (source[0].primary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].PrimaryPhoneType.trim()) problem processing test - please update	TypeError: Cannot call method 'trim' of null
2014-08-12 14:22:37	24	FAILED	'Todo'.should.equal(destination[0].SecondaryPhone)	{"name":"AssertionError","actual":"Todo","expected":"412123456","operator":"to be","message":"expected 'Todo' to be '412123456'","showDiff":true,"generatedMessage":true}
2014-08-12 14:22:38	25	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Landline","params":{"operator":"to be","expected":"Landline","showDiff":true},"negate":false}
2014-08-12 14:22:39	26	PASSED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim())	{"obj":"Mobile","params":{"operator":"to be","expected":"Mobile","showDiff":true},"negate":false}
2014-08-12 14:22:39	27	FAILED	((source[0].secondary_phone_type_id == '1') ? 'Landline' : (source[0].secondary_phone_type_id == '2') ? 'Mobile' : 'Unknown').should.equal(destination[0].SecondaryPhoneType.trim()) problem processing test - please update	TypeError: Cannot call method 'trim' of null
2014-08-12 14:22:40	28	FAILED	'Todo'.should.equal(destination[0].MobilePhone)	{"name":"AssertionError","actual":"Todo","expected":null,"operator":"to be","message":"expected 'Todo' to be null","showDiff":true,"generatedMessage":true}
2014-08-12 14:22:40	29	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"abcd@yahoo.com","params":{"operator":"to be","expected":"abcd@yahoo.com","showDiff":true},"negate":false}
2014-08-12 14:22:41	30	PASSED	source[0].email_address.should.equal(destination[0].Email)	{"obj":"","params":{"operator":"to be","expected":"","showDiff":true},"negate":false}
2014-08-12 14:22:42	31	PASSED	source[0].date_of_birth.toString().should.equal(destination[0].DateOfBirth.toString())	{"obj":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","params":{"operator":"to be","expected":"Thu Jan 02 1930 11:00:00 GMT+1100 (AUS Eastern Daylight Time)","showDiff":true},"negate":false}
2014-08-12 14:22:42	32	PASSED	((source[0].seq_element_type_id == '9') ? 'Residential' : (source[0].seq_element_type_id == '8') ? 'Business' : 'Unknown').should.equal(destination[0].CustomerType.trim())	{"obj":"Residential","params":{"operator":"to be","expected":"Residential","showDiff":true},"negate":false}
