# design test artefact			
# ARTEFACT: TRANSFORM_DimService_tests			
# DESCRIPTION: Test each transformation rule			
SOURCE_SELECTION_CRITERIA	DESTINATION_SELECTION_CRITERIA	TEST	DESCRIPTION
REUSE_SQL	"FROM [schema].utl_site LEFT JOIN [schema].utl_distrib_loss_factor_sched ON utl_distrib_loss_factor_sched.dlf_id = utl_site.dlf_id LEFT JOIN (SELECT utl_meter.site_id, SUM (utl_meter.est_daily_consumption) AS est_daily_consumption, MIN (CASE WHEN NULLIF(utl_meter.next_sched_read_date,'9999-12-31') < GETDATE () THEN NULL ELSE NULLIF(utl_meter.next_sched_read_date,'9999-12-31') END) AS NextScheduledReadDate, SUM (CASE WHEN utl_meter.Meta_LatestUpdate_TaskExecutionInstanceId > -2 THEN 1 ELSE 0 END) AS Meta_HasChanged FROM [schema].utl_meter GROUP BY utl_meter.site_id) AS _meterDailyConsumptionAndReadDate ON _meterDailyConsumptionAndReadDate.site_id = utl_site.site_id LEFT JOIN (SELECT utl_meter_header.site_id, MIN (CASE WHEN NULLIF(utl_meter_header.next_sched_read_date,'9999-12-31') < GETDATE () THEN NULL ELSE NULLIF(utl_meter_header.next_sched_read_date,'9999-12-31') END) AS NextScheduledReadDate, SUM (CASE WHEN utl_meter_header.Meta_LatestUpdate_TaskExecutionInstanceId > -2 THEN 1 ELSE 0 END) AS Meta_HasChanged FROM [schema].utl_meter_header GROUP BY utl_meter_header.site_id) AS _meterHeaderNextScheduledReadDate ON _meterHeaderNextScheduledReadDate.site_id = utl_site.site_id LEFT JOIN (SELECT utl_account_frmp_history.site_id, MAX ( utl_account_frmp_history.frmp_date) AS FRMPDate, SUM (CASE WHEN utl_account_frmp_history.Meta_LatestUpdate_TaskExecutionInstanceId > -2 THEN 1 ELSE 0 END) AS Meta_HasChanged FROM [schema].utl_account_frmp_history GROUP BY utl_account_frmp_history.site_id) AS _siteFRMPDate ON _siteFRMPDate.site_id = utl_site.site_id WHERE ISNULL (utl_distrib_loss_factor_sched.start_date, '1900-01-01') < GETDATE () AND ISNULL (utl_distrib_loss_factor_sched.end_date, '9999-12-31') > GETDATE () AND (utl_site.Meta_LatestUpdate_TaskExecutionInstanceId > -2 OR utl_distrib_loss_factor_sched.Meta_LatestUpdate_TaskExecutionInstanceId > -2 OR _meterDailyConsumptionAndReadDate.Meta_HasChanged > 0 OR _meterHeaderNextScheduledReadDate.Meta_HasChanged > 0 OR _siteFRMPDate.Meta_HasChanged > 0)"		
[REUSE_SQL]		source.length.should.equal(destination.length)	row counts should match
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].site_id.should.equal(destination[0].ServiceKey)	1:1 map rule plus int cast
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].site_identifier.should.equal(destination[0].MarketIdentifier)	1:1 map rule plus int cast
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	((source[0].seq_product_type_id == '1') ? 'Internet' : (source[0].seq_product_type_id == '2') ? 'Electricity' : (source[0].seq_product_type_id == '3') ? 'Gas' : (source[0].seq_product_type_id == '7') ? 'Telco' : '{Unknown}').should.equal(destination[0].ServiceType)	Decode Service Type (Electricity)
[REUSE_SQL] AND utl_site.site_id = '1206636'	WHERE ServiceKey = '1206636'	((source[0].seq_product_type_id == '1') ? 'Internet' : (source[0].seq_product_type_id == '2') ? 'Electricity' : (source[0].seq_product_type_id == '3') ? 'Gas' : (source[0].seq_product_type_id == '7') ? 'Telco' : '{Unknown}').should.equal(destination[0].ServiceType)	Decode Service Type (Gas)
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].dlf_factor.should.equal(destination[0].LossFactor)	1:1 map rule (Electricity)
[REUSE_SQL] AND utl_site.site_id = '1206636'	WHERE ServiceKey = '1206636'	source[0].dlf_factor.should.equal(destination[0].LossFactor)	1:1 map rule (Gas)
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	parseFloat('40.9817').should.equal(destination[0].EstimatedDailyConsumption)	Hardcode
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].metering_type.should.equal(destination[0].MeteringType.trim())	1:1 map plus trim
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].addr_suburb.should.equal(destination[0].ResidentialSuburb)	1:1 map
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].addr_postcode.should.equal(destination[0].ResidentialPostcode.trim())	1:1 map plus trim
[REUSE_SQL] AND utl_site.site_id = '696059'	WHERE ServiceKey = '696059'	source[0].addr_city.should.equal(destination[0].ResidentialState.trim())	1:1 map plus trim
